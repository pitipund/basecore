# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-07 13:49
from __future__ import unicode_literals

import ckeditor_uploader.fields
from django.db import migrations, models
import django.db.models.deletion
import his.framework.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdditionalScreenshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screenshot', models.FileField(help_text='เลือกภาพเพิ่มเติม เพื่อใส่ต่อจากภาพหลัก', upload_to='screenshots')),
                ('index', models.FloatField(default=0)),
            ],
            options={
                'ordering': ('index', 'id'),
                'verbose_name': 'รูปหน้าจอเพิ่มเติม',
                'verbose_name_plural': 'รูปหน้าจอเพิ่มเติม',
            },
        ),
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('order', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('full_name', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True)),
                ('order', models.IntegerField(default=0)),
                ('consignment_date', models.DateField(null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='DesignGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('include_related_models', models.BooleanField(default=True, help_text='แสดง model ที่เกี่ยวข้องแต่ไม่ได้เลือกใน ER Diagram?')),
                ('order', models.IntegerField(default=0)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.App')),
            ],
        ),
        migrations.CreateModel(
            name='DocScreen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('SCREEN', 'screen'), ('REPORT', 'report')], default='SCREEN', help_text='ประเภทเอกสาร หน้าจอ/รายงาน', max_length=50)),
                ('name', models.CharField(help_text='ชื่อหน้าจอ', max_length=200)),
                ('qml', models.CharField(blank=True, help_text='ชื่อไฟล์ qml เช่น HD/Queue.qml', max_length=200)),
                ('manual_screenshot', models.BooleanField(default=False)),
                ('screenshot', models.FileField(blank=True, help_text='เลือกไฟล์ screenshot กรณีต้องการ capture ภาพเอง', upload_to='screenshots')),
                ('table', models.TextField(blank=True, default='', help_text='ตาราง Field Property ที่ gen มาได้')),
                ('alias', models.CharField(blank=True, max_length=200, unique=True)),
                ('index', models.FloatField(default=0, verbose_name='Order')),
                ('approved', models.BooleanField(default=False, verbose_name='user เซ็นยืนยันแบบฟอร์มแล้ว')),
            ],
        ),
        migrations.CreateModel(
            name='FlowCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('due_date', models.DateField(null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FlowMatrix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=5)),
                ('description', models.CharField(max_length=500)),
                ('code_complete', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('demo_date', models.DateField(blank=True, null=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tools.FlowCategory')),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='FunctionalArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=300)),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tools.Book')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.App')),
            ],
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RedmineLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_no', models.CharField(max_length=5)),
                ('point', models.IntegerField(default=1)),
                ('status', his.framework.models.fields.EnumField(default=1, enum=[(1, 'NEW'), (2, 'IN_PROGRESS'), (3, 'RESOLVED'), (4, 'FEEDBACK'), (5, 'CLOSED'), (6, 'REJECTED'), (7, 'PAUSED'), (8, 'READ'), (10, 'DEFER')])),
            ],
        ),
        migrations.CreateModel(
            name='Usecase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=300)),
                ('design_completed', models.BooleanField(default=False, help_text='Completely design this model')),
                ('code_completed', models.BooleanField(default=False, help_text='Finished coding this feature')),
                ('assign_completed', models.BooleanField(default=False, help_text='Finished assigning task in Redmine.')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, help_text='Usecase description')),
                ('comment', models.TextField(blank=True)),
                ('progress', models.IntegerField(default=0, editable=False)),
                ('has_ui_test', models.BooleanField(default=False, editable=False)),
                ('has_unit_test', models.BooleanField(default=False, editable=False)),
                ('page', models.IntegerField(default=0, editable=False, help_text='Page number in Book')),
                ('flowmatrixs', models.ManyToManyField(blank=True, to='tools.FlowMatrix')),
                ('functional_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.FunctionalArea')),
                ('phase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tools.Phase')),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.AddField(
            model_name='redminelink',
            name='usecases',
            field=models.ManyToManyField(to='tools.Usecase'),
        ),
        migrations.AddField(
            model_name='flowmatrix',
            name='usecases',
            field=models.ManyToManyField(to='tools.Usecase'),
        ),
        migrations.AddField(
            model_name='docscreen',
            name='usecases',
            field=models.ManyToManyField(blank=True, related_name='screens', to='tools.Usecase'),
        ),
        migrations.AddField(
            model_name='designgroup',
            name='models',
            field=models.ManyToManyField(blank=True, to='tools.Model'),
        ),
        migrations.AddField(
            model_name='designgroup',
            name='usecases',
            field=models.ManyToManyField(blank=True, to='tools.Usecase'),
        ),
        migrations.AddField(
            model_name='additionalscreenshot',
            name='screen',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.DocScreen'),
        ),
        migrations.CreateModel(
            name='UsecaseCompletion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('tools.usecase',),
        ),
        migrations.CreateModel(
            name='UsecaseFlowMatrix',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('tools.usecase',),
        ),
    ]
