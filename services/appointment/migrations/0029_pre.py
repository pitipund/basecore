# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2019-04-23 16:08
from __future__ import unicode_literals

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models, transaction
import django.db.models.deletion


def create_dummy_for_null_relation(apps, schema_editor):
    with transaction.atomic():
        ContentType = apps.get_model("contenttypes", "ContentType")
        Provider = apps.get_model("appointment", "Provider")
        Client = apps.get_model("appointment", "Client")
        Address = apps.get_model("appointment", "Address")
        ServiceAppointment = apps.get_model("appointment", "ServiceAppointment")
        dummy_address, __ = Address.objects.get_or_create(name="dummy_address")
        dummy_provider, __ = Provider.objects.get_or_create(content_type=ContentType.objects.get_for_model(Address),
                                                            object_id=dummy_address.id)
        dummy_client, __ = Client.objects.get_or_create(content_type=ContentType.objects.get_for_model(Address),
                                                        object_id=dummy_address.id)
        ServiceAppointment.objects.filter(provider=None).update(provider=dummy_provider)
        ServiceAppointment.objects.filter(client=None).update(client=dummy_client)


def restore_dummy_relation(apps, schema_editor):
    with transaction.atomic():
        ContentType = apps.get_model("contenttypes", "ContentType")
        Provider = apps.get_model("appointment", "Provider")
        Client = apps.get_model("appointment", "Client")
        Address = apps.get_model("appointment", "Address")
        ServiceAppointment = apps.get_model("appointment", "ServiceAppointment")
        try:
            dummy_address = Address.objects.get(name="dummy_address")
            dummy_provider = Provider.objects.get(content_type=ContentType.objects.get_for_model(Address),
                                                  object_id=dummy_address.id)
            dummy_client = Client.objects.get(content_type=ContentType.objects.get_for_model(Address),
                                              object_id=dummy_address.id)
            ServiceAppointment.objects.filter(provider=dummy_provider).update(provider=None)
            ServiceAppointment.objects.filter(client=dummy_client).update(client=None)
            dummy_provider.delete()
            dummy_client.delete()
            dummy_address.delete()
        except ObjectDoesNotExist:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('appointment', '0028_auto_20190419_1647'),
    ]

    operations = [
        migrations.RunPython(create_dummy_for_null_relation, restore_dummy_relation),
    ]
