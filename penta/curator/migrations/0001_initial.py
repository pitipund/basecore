# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-10-05 15:55
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from his.penta.curator import fields
from his.penta.showtime import utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('geoname', models.CharField(max_length=7)),
                ('iso_code', models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='CountryNetwork',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('network', models.CharField(max_length=36)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='networks', to='curator.Country')),
            ],
        ),
        migrations.CreateModel(
            name='CuratorChannel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('icon', models.ImageField(blank=True, null=True, upload_to=utils.UploadToDir('uploaded/icon'), verbose_name='Icon')),
                ('icon_url', models.URLField(blank=True, null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now_add=True)),
                ('detail', models.CharField(blank=True, default='', max_length=2000, null=True)),
                ('isLive', models.BooleanField(default=False)),
                ('isDefault', models.BooleanField(default=False)),
                ('isPrivate', models.BooleanField(db_index=True, default=False)),
                ('isOfficial', models.BooleanField(default=False)),
                ('url_name', models.CharField(blank=True, default=None, max_length=50, null=True, unique=True)),
                ('pin_queue', models.IntegerField(blank=True, null=True)),
                ('user_save', models.BooleanField(db_index=True, default=False)),
                ('user_share', models.BooleanField(default=False)),
                ('is_series_completed', models.BooleanField(default=False)),
                ('is_create_from_auto', models.BooleanField(default=False)),
                ('access_level', models.IntegerField(choices=[(1, 'ทุกคน'), (2, 'เพนต้าเท่านั้น')], db_index=True, default=1)),
                ('rank_score', models.IntegerField(default=0)),
                ('enable_sort_pattern', models.BooleanField(default=False, help_text='enable new auto sort feature')),
                ('auto_sort', models.BooleanField(default=False, help_text='auto sort when new video added')),
                ('desc_sort', models.BooleanField(default=False, help_text='sort with newer first')),
                ('episode_pattern', models.CharField(blank=True, default='', help_text='regex pattern of episode', max_length=100)),
                ('use_date_pattern', models.BooleanField(default=False, help_text='use date pattern (disable episode pattern)')),
                ('video_part_pattern', models.CharField(blank=True, default='', help_text='regex pattern of video part', max_length=100)),
                ('is_checked_onair', models.BooleanField(default=False)),
                ('is_onair', models.BooleanField(default=False)),
                ('start_onair', models.DateTimeField(blank=True, default=None, null=True)),
                ('schedule_monday_start', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_monday_end', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_tuesday_start', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_tuesday_end', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_wednesday_start', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_wednesday_end', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_thursday_start', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_thursday_end', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_friday_start', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_friday_end', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_saturday_start', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_saturday_end', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_sunday_start', models.TimeField(blank=True, default=None, null=True)),
                ('schedule_sunday_end', models.TimeField(blank=True, default=None, null=True)),
                ('is_sqool', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-update_at'],
                'permissions': (('edit_all_channel', 'Edit all channels'),),
            },
        ),
        migrations.CreateModel(
            name='CuratorComment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.CharField(max_length=500)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CuratorLanguageSupport',
            fields=[
                ('code', models.CharField(max_length=2, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=32)),
                ('native_name', models.CharField(blank=True, default=None, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CuratorLike',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('likes', models.IntegerField()),
                ('dislikes', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='CuratorLink',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', fields.CharField3Byte(max_length=200)),
                ('url', models.URLField()),
                ('duration_s', models.IntegerField()),
                ('video_type', models.CharField(choices=[('Y', 'Youtube'), ('F', 'Facebook'), ('D', 'Dailymotion'), ('V', 'Vimeo'), ('E', 'etc'), ('S', 'Stream URL'), ('M', 'M3U8'), ('R', 'RTMP'), ('T', 'RTSP')], db_index=True, max_length=1)),
                ('video_id', models.CharField(blank=True, db_index=True, max_length=500, null=True)),
                ('provider_id', models.CharField(blank=True, max_length=500, null=True)),
                ('provider_name', models.CharField(blank=True, max_length=500, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to=utils.UploadToDir('uploaded/thumbnail'), verbose_name='thumbnail')),
                ('thumbnail_url', models.CharField(blank=True, max_length=300)),
                ('snapshot_url', models.CharField(blank=True, max_length=200, null=True)),
                ('link_index', models.IntegerField(default=1)),
                ('isAvailable', models.BooleanField(default=True)),
                ('payload', fields.TextField3Byte(blank=True, null=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CuratorLinkKey',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorChannel')),
            ],
        ),
        migrations.CreateModel(
            name='CuratorLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('detail', models.CharField(blank=True, max_length=500, null=True)),
                ('category', models.CharField(choices=[('H', 'Curator Channel'), ('P', 'Curator Playlist'), ('L', 'Curator Link'), ('U', 'User'), ('A', 'API'), ('S', 'Live Channel')], db_index=True, max_length=1)),
                ('ref_id', models.IntegerField(blank=True, null=True)),
                ('action', models.CharField(choices=[('C', 'Create'), ('E', 'Edit'), ('D', 'Delete'), ('W', 'Watch'), ('L', 'Like'), ('I', 'Dislike'), ('M', 'Comment'), ('F', 'Follow'), ('N', 'Unfollow'), ('T', 'Access tag'), ('H', 'Access channel')], db_index=True, max_length=1)),
                ('create_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CuratorMirror',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('youtube_user_id', models.CharField(blank=True, max_length=256, null=True)),
                ('youtube_channel_id', models.CharField(blank=True, max_length=256, null=True)),
                ('youtube_playlist_id', models.CharField(blank=True, max_length=256, null=True)),
                ('instant_add', models.BooleanField(default=True)),
                ('latest_first', models.BooleanField(default=True)),
                ('latest_sync', models.DateTimeField(auto_now_add=True)),
                ('must_publish_after', models.DateTimeField(blank=True, default=None, null=True)),
                ('must_publish_before', models.DateTimeField(blank=True, default=None, null=True)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorChannel')),
            ],
        ),
        migrations.CreateModel(
            name='CuratorMirrorRule',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('keyword', models.CharField(blank=True, max_length=256, null=True)),
                ('rule', models.IntegerField(choices=[(1, 'Include'), (2, 'Exclude')], default=1)),
                ('mirror', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorMirror')),
            ],
        ),
        migrations.CreateModel(
            name='CuratorPlaylist',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', fields.CharField3Byte(max_length=200)),
                ('create_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('update_at', models.DateTimeField(auto_now_add=True)),
                ('detail', fields.CharField3Byte(blank=True, max_length=2000, null=True)),
                ('isDefault', models.BooleanField(default=False)),
                ('playlist_index', models.IntegerField(default=1)),
                ('play_start_at', models.IntegerField(blank=True, null=True)),
                ('play_end_at', models.IntegerField(blank=True, null=True)),
                ('from_rules_auto', models.BooleanField(default=False)),
                ('sub_access_level', models.IntegerField(choices=[(1, 'ทุกคน'), (2, 'เพนต้าเท่านั้น')], db_index=True, default=1)),
            ],
        ),
        migrations.CreateModel(
            name='CuratorStat',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('asr_short', models.FloatField(default=0)),
                ('acd_short', models.IntegerField(default=0)),
                ('total_short', models.IntegerField(default=0)),
                ('success_short', models.IntegerField(default=0)),
                ('duration_short', models.IntegerField(default=0)),
                ('asr_long', models.FloatField(default=0)),
                ('acd_long', models.IntegerField(default=0)),
                ('total_long', models.IntegerField(default=0)),
                ('success_long', models.IntegerField(default=0)),
                ('duration_long', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'curator_curatorstat',
            },
        ),
        migrations.CreateModel(
            name='CuratorStreamUrl',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('streamUrl', models.CharField(blank=True, max_length=1000, null=True)),
                ('referrerUrl', models.CharField(blank=True, max_length=1000, null=True)),
                ('isActive', models.BooleanField(default=False)),
                ('order_key', models.IntegerField(default=1)),
                ('isPrimary', models.BooleanField(default=False)),
                ('volume', models.IntegerField(default=0)),
                ('note', models.CharField(blank=True, default='', max_length=200)),
                ('is_toggle_all', models.BooleanField(default=False, help_text='Is last configured by utils.toggle_all()')),
            ],
            options={
                'ordering': ['-isActive', 'order_key', 'id'],
            },
        ),
        migrations.CreateModel(
            name='CuratorStreamUrlLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('start_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('total', models.IntegerField(default=0)),
                ('success', models.IntegerField(default=0)),
                ('duration', models.IntegerField(default=0)),
                ('cpu_id', models.CharField(blank=True, max_length=300)),
                ('curatorStreamUrl', models.ForeignKey(blank=True, db_column='curatorStreamUrl_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorStreamUrl')),
            ],
            options={
                'db_table': 'curator_curatorstreamurllog',
            },
        ),
        migrations.CreateModel(
            name='CuratorSupport',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('url', models.URLField(help_text='URL to redirect after user press icon')),
                ('icon', models.ImageField(upload_to='uploaded/support', verbose_name='Icon')),
                ('enabled', models.BooleanField(default=True)),
                ('sortkey', models.IntegerField(default=0, help_text='Channel number')),
                ('minversion', models.IntegerField(default=142, help_text='Minimum version of PentaTV that supports this media')),
                ('redirect', models.BooleanField(default=False, help_text='When icon was clicked, should we redirect user to URL?')),
                ('broadcast_by_us', models.BooleanField(default=False, help_text='This channel was broadcast by us?')),
                ('is_digital', models.BooleanField(default=False, help_text='To indicate if this channel is digital tv channel')),
                ('is_recorded', models.BooleanField(default=False, help_text='To indicate if live recorded on our server')),
                ('record_url', models.URLField(blank=True, default='', help_text='URL from record server', null=True)),
                ('allow_oversea', models.BooleanField(default=True, help_text='Allow this channel to broadcast outside Thailand')),
                ('languages', models.ManyToManyField(to='curator.CuratorLanguageSupport')),
            ],
            options={
                'verbose_name': 'Live Channel',
            },
        ),
        migrations.CreateModel(
            name='CuratorTag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('name_en', models.CharField(default='n/a', max_length=50)),
                ('show_in_listpage', models.BooleanField(default=False)),
                ('show_in_listpage_index', models.IntegerField(blank=True, default=0)),
                ('order_preference', models.CharField(choices=[('R', 'number of follow on website + follow on penta last 7 days'), ('U', 'last update first'), ('N', 'newest first'), ('D', 'random'), ('V', 'number of views on website last 7 days'), ('L', 'number of views on penta last 30 days')], default='R', max_length=1)),
                ('channel_show', models.ManyToManyField(help_text='Channel show on list', related_name='channel_show', to='curator.CuratorChannel')),
                ('curatorChannel', models.ManyToManyField(related_name='tags', to='curator.CuratorChannel')),
            ],
        ),
        migrations.CreateModel(
            name='CuratorUserUnwantedLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorChannel')),
                ('link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorLink')),
            ],
        ),
        migrations.CreateModel(
            name='CuratorUserWatched',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='CuratorViews',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('views', models.IntegerField(default=0)),
                ('curatorChannel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorChannel')),
            ],
        ),
        migrations.CreateModel(
            name='ExtUserProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LiveChannelLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('create_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('status', models.CharField(choices=[('G', 'Good'), ('A', 'Acknowledge'), ('R', 'Restart'), ('L', 'Low Buffer'), ('S', 'Skip'), ('B', 'Bad')], max_length=1)),
            ],
            options={
                'get_latest_by': 'create_at',
            },
        ),
        migrations.CreateModel(
            name='PentaSubscript',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('penta', models.CharField(db_index=True, max_length=100)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('curatorChannel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorChannel')),
                ('curatorSupport', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorSupport')),
            ],
        ),
        migrations.CreateModel(
            name='QualityLogResoveSource',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(default='', max_length=30)),
                ('ip_hex', models.CharField(default='', max_length=16)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionForum',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_view_by_owner', models.DateTimeField(blank=True, default=None, null=True)),
                ('updated_by_owner', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_view_by_questioner', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_by_questioner', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionThread',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.CharField(max_length=1024)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('questionforum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curator.QuestionForum')),
            ],
        ),
        migrations.CreateModel(
            name='RockLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('cpu_id', models.CharField(blank=True, db_index=True, max_length=50)),
                ('action', models.CharField(blank=True, db_index=True, max_length=30, null=True)),
                ('params', models.TextField()),
                ('time', models.DateTimeField(blank=True, db_index=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('keyword', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('hits', models.IntegerField(default=0)),
                ('user_hash', models.CharField(blank=True, default='', max_length=64)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SuggestPlaylistFromQuestion',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('first_watch', models.DateTimeField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('receive_mail', models.BooleanField(default=True)),
                ('last_send_update_mail', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='userdetail', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Follower', to=settings.AUTH_USER_MODEL)),
                ('following', models.ManyToManyField(related_name='Following', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserHaveChannel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('pin_queue', models.IntegerField(blank=True, null=True)),
                ('subscribed', models.BooleanField(default=True)),
                ('follow_at', models.DateTimeField(auto_now_add=True)),
                ('unwatch_count', models.IntegerField(default=0)),
                ('curatorChannel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='curator.CuratorChannel')),
                ('liveChannel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorStreamUrl')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPhoto',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('photo', models.ImageField(upload_to=utils.UploadToDir('uploaded/album'), verbose_name='photo')),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserPhotoAlbum',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=100)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('photos', models.ManyToManyField(to='curator.UserPhoto')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url_name', models.CharField(blank=True, max_length=50, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=utils.UploadToDir('uploaded/profile'), verbose_name='Profile image')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('isDisplay_email', models.BooleanField(default=False)),
                ('facebook_id', models.CharField(blank=True, default='', max_length=255)),
                ('facebook_access_token', models.TextField(blank=True, default='')),
                ('facebook_expires', models.IntegerField(default=0, null=True)),
                ('last_visit_follow_page', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='userprofile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CuratorPlaylistExtra',
            fields=[
                ('playlist', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='extra', serialize=False, to='curator.CuratorPlaylist')),
                ('open_for_question', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='suggestplaylistfromquestion',
            name='playlist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorPlaylist'),
        ),
        migrations.AddField(
            model_name='suggestplaylistfromquestion',
            name='questionthread',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curator.QuestionThread'),
        ),
        migrations.AddField(
            model_name='questionforum',
            name='playlist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorPlaylist'),
        ),
        migrations.AddField(
            model_name='questionforum',
            name='questioner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='livechannellog',
            name='curator_playlist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorPlaylist'),
        ),
        migrations.AddField(
            model_name='livechannellog',
            name='streamUrl',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorStreamUrl'),
        ),
        migrations.AddField(
            model_name='livechannellog',
            name='support',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorSupport'),
        ),
        migrations.AddField(
            model_name='livechannellog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='curatorviews',
            name='curatorPlaylist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorPlaylist'),
        ),
        migrations.AddField(
            model_name='curatoruserwatched',
            name='curatorPlaylist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorPlaylist'),
        ),
        migrations.AddField(
            model_name='curatoruserwatched',
            name='user',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='curatortag',
            name='curatorPlaylist',
            field=models.ManyToManyField(related_name='tags', to='curator.CuratorPlaylist'),
        ),
        migrations.AddField(
            model_name='curatortag',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorTag'),
        ),
        migrations.AddField(
            model_name='curatorstreamurl',
            name='support',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorSupport'),
        ),
        migrations.AddField(
            model_name='curatorstat',
            name='curatorStreamUrl',
            field=models.ForeignKey(blank=True, db_column='curatorStreamUrl_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorStreamUrl'),
        ),
        migrations.AddField(
            model_name='curatorplaylist',
            name='channel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorChannel'),
        ),
        migrations.AddField(
            model_name='curatorplaylist',
            name='link',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to='curator.CuratorLink'),
        ),
        migrations.AddField(
            model_name='curatorplaylist',
            name='user_like',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='curatorlike',
            name='curatorPlaylist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorPlaylist'),
        ),
        migrations.AddField(
            model_name='curatorcomment',
            name='curatorPlaylist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorPlaylist'),
        ),
        migrations.AddField(
            model_name='curatorcomment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='curatorchannel',
            name='languages',
            field=models.ManyToManyField(to='curator.CuratorLanguageSupport'),
        ),
        migrations.AddField(
            model_name='curatorchannel',
            name='live_source',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorSupport'),
        ),
        migrations.AddField(
            model_name='curatorchannel',
            name='sqool_group',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='curatorchannel',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
