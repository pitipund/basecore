# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-10-05 15:55
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('curator', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BaseChannel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application', models.CharField(blank=True, default='', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BaseUserSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application', models.CharField(blank=True, default='', max_length=100)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='pentacenter.BaseChannel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channel_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChannelOnairTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.CharField(db_index=True, max_length=5)),
                ('weekday', models.IntegerField(db_index=True)),
                ('channel', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorChannel')),
                ('live_source', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorSupport')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_type', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('unique_id', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('device_token', models.CharField(blank=True, db_index=True, default='', max_length=200, null=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('app', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='pentacenter.App')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceNotificationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_sent_at', models.DateTimeField(blank=True, null=True)),
                ('received_at', models.DateTimeField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='pentacenter.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application', models.CharField(blank=True, default='', max_length=100)),
                ('policy', models.CharField(choices=[('U', 'Urgent'), ('E', 'Ensure'), ('N', 'No Repeat'), ('-', 'None')], default='-', max_length=1)),
                ('payload', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_sent_at', models.DateTimeField(blank=True, null=True)),
                ('received_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationBroadcastPayload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payload', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PentaCenterChannelLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, null=True)),
                ('watch_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('duration_second', models.IntegerField(blank=True, default=0, null=True)),
                ('device', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='pentacenter.Device')),
                ('live_channel', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorSupport')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'create_at',
                'ordering': ['-watch_at'],
            },
        ),
        migrations.CreateModel(
            name='UserChannelInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculated_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('source', models.CharField(blank=True, choices=[('livewatch', 'livewatch'), ('follow', 'follow'), ('channelwatch', 'channelwatch'), ('', '')], default='', max_length=15, null=True)),
                ('channel', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='curator.CuratorChannel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='notification',
            name='broadcast_payload',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pentacenter.NotificationBroadcastPayload'),
        ),
        migrations.AddField(
            model_name='notification',
            name='subscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pentacenter.BaseUserSubscription'),
        ),
        migrations.AddField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='devicenotificationstatus',
            name='notification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_notifications', to='pentacenter.Notification'),
        ),
        migrations.AlterUniqueTogether(
            name='userchannelinterest',
            unique_together=set([('channel', 'user', 'source')]),
        ),
        migrations.AlterUniqueTogether(
            name='devicenotificationstatus',
            unique_together=set([('device', 'notification')]),
        ),
        migrations.AlterUniqueTogether(
            name='channelonairtime',
            unique_together=set([('live_source', 'weekday', 'time')]),
        ),
    ]
